// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: live/request/request_live.proto

package com.volcengine.service.live.model.request;

/**
 * Protobuf type {@code Volcengine.Live.Models.Request.DescribeLiveStreamInfoByPageRequest}
 */
public final class DescribeLiveStreamInfoByPageRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:Volcengine.Live.Models.Request.DescribeLiveStreamInfoByPageRequest)
    DescribeLiveStreamInfoByPageRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DescribeLiveStreamInfoByPageRequest.newBuilder() to construct.
  private DescribeLiveStreamInfoByPageRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DescribeLiveStreamInfoByPageRequest() {
    vhost_ = "";
    domain_ = "";
    app_ = "";
    stream_ = "";
    streamType_ = "";
    infoType_ = "";
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DescribeLiveStreamInfoByPageRequest();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DescribeLiveStreamInfoByPageRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            pageNum_ = input.readInt64();
            break;
          }
          case 16: {

            pageSize_ = input.readInt64();
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            vhost_ = s;
            break;
          }
          case 34: {
            java.lang.String s = input.readStringRequireUtf8();

            domain_ = s;
            break;
          }
          case 42: {
            java.lang.String s = input.readStringRequireUtf8();

            app_ = s;
            break;
          }
          case 50: {
            java.lang.String s = input.readStringRequireUtf8();

            stream_ = s;
            break;
          }
          case 58: {
            java.lang.String s = input.readStringRequireUtf8();

            streamType_ = s;
            break;
          }
          case 66: {
            java.lang.String s = input.readStringRequireUtf8();

            infoType_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.volcengine.service.live.model.request.LiveRequest.internal_static_Volcengine_Live_Models_Request_DescribeLiveStreamInfoByPageRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.volcengine.service.live.model.request.LiveRequest.internal_static_Volcengine_Live_Models_Request_DescribeLiveStreamInfoByPageRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.class, com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.Builder.class);
  }

  public static final int PAGENUM_FIELD_NUMBER = 1;
  private long pageNum_;
  /**
   * <pre>
   *当前页码，取值范围为 。
   * </pre>
   *
   * <code>int64 PageNum = 1;</code>
   * @return The pageNum.
   */
  @java.lang.Override
  public long getPageNum() {
    return pageNum_;
  }

  public static final int PAGESIZE_FIELD_NUMBER = 2;
  private long pageSize_;
  /**
   * <pre>
   *分页大小，取值范围为 。
   * </pre>
   *
   * <code>int64 PageSize = 2;</code>
   * @return The pageSize.
   */
  @java.lang.Override
  public long getPageSize() {
    return pageSize_;
  }

  public static final int VHOST_FIELD_NUMBER = 3;
  private volatile java.lang.Object vhost_;
  /**
   * <pre>
   *域名空间名称。
   *参数 `Domain` 和 `Vhost`传且仅传一个。
   * </pre>
   *
   * <code>string Vhost = 3;</code>
   * @return The vhost.
   */
  @java.lang.Override
  public java.lang.String getVhost() {
    java.lang.Object ref = vhost_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      vhost_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *域名空间名称。
   *参数 `Domain` 和 `Vhost`传且仅传一个。
   * </pre>
   *
   * <code>string Vhost = 3;</code>
   * @return The bytes for vhost.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getVhostBytes() {
    java.lang.Object ref = vhost_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      vhost_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DOMAIN_FIELD_NUMBER = 4;
  private volatile java.lang.Object domain_;
  /**
   * <pre>
   *推流域名。
   *参数 `Domain` 和 `Vhost`传且仅传一个。
   * </pre>
   *
   * <code>string Domain = 4;</code>
   * @return The domain.
   */
  @java.lang.Override
  public java.lang.String getDomain() {
    java.lang.Object ref = domain_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      domain_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *推流域名。
   *参数 `Domain` 和 `Vhost`传且仅传一个。
   * </pre>
   *
   * <code>string Domain = 4;</code>
   * @return The bytes for domain.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDomainBytes() {
    java.lang.Object ref = domain_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      domain_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int APP_FIELD_NUMBER = 5;
  private volatile java.lang.Object app_;
  /**
   * <pre>
   * 应用名称，默认查询所有应用名称，由 1 到 30
   * 位数字、字母、下划线及"-"和"."组成。
   * </pre>
   *
   * <code>string App = 5;</code>
   * @return The app.
   */
  @java.lang.Override
  public java.lang.String getApp() {
    java.lang.Object ref = app_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      app_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 应用名称，默认查询所有应用名称，由 1 到 30
   * 位数字、字母、下划线及"-"和"."组成。
   * </pre>
   *
   * <code>string App = 5;</code>
   * @return The bytes for app.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getAppBytes() {
    java.lang.Object ref = app_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      app_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STREAM_FIELD_NUMBER = 6;
  private volatile java.lang.Object stream_;
  /**
   * <pre>
   * 流名称，缺省情况下，查询所有流名称，由 1 到 100
   * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
   * </pre>
   *
   * <code>string Stream = 6;</code>
   * @return The stream.
   */
  @java.lang.Override
  public java.lang.String getStream() {
    java.lang.Object ref = stream_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      stream_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 流名称，缺省情况下，查询所有流名称，由 1 到 100
   * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
   * </pre>
   *
   * <code>string Stream = 6;</code>
   * @return The bytes for stream.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStreamBytes() {
    java.lang.Object ref = stream_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      stream_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STREAMTYPE_FIELD_NUMBER = 7;
  private volatile java.lang.Object streamType_;
  /**
   * <pre>
   * 流类型，缺省情况下表示全选。支持如下取值。
   *&lt;li&gt;Origin：原始流；
   *&lt;li&gt;trans：转码流。
   * </pre>
   *
   * <code>string StreamType = 7;</code>
   * @return The streamType.
   */
  @java.lang.Override
  public java.lang.String getStreamType() {
    java.lang.Object ref = streamType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      streamType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 流类型，缺省情况下表示全选。支持如下取值。
   *&lt;li&gt;Origin：原始流；
   *&lt;li&gt;trans：转码流。
   * </pre>
   *
   * <code>string StreamType = 7;</code>
   * @return The bytes for streamType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getStreamTypeBytes() {
    java.lang.Object ref = streamType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      streamType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int INFOTYPE_FIELD_NUMBER = 8;
  private volatile java.lang.Object infoType_;
  /**
   * <pre>
   * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
   *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
   *&lt;li&gt;onlineuser：在线人数；
   *&lt;li&gt;bandwidth：带宽信息;
   *&lt;li&gt;bitrate：码率信息；
   *&lt;li&gt;framerate：帧率信息；
   * </pre>
   *
   * <code>string InfoType = 8;</code>
   * @return The infoType.
   */
  @java.lang.Override
  public java.lang.String getInfoType() {
    java.lang.Object ref = infoType_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      infoType_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
   *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
   *&lt;li&gt;onlineuser：在线人数；
   *&lt;li&gt;bandwidth：带宽信息;
   *&lt;li&gt;bitrate：码率信息；
   *&lt;li&gt;framerate：帧率信息；
   * </pre>
   *
   * <code>string InfoType = 8;</code>
   * @return The bytes for infoType.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getInfoTypeBytes() {
    java.lang.Object ref = infoType_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      infoType_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (pageNum_ != 0L) {
      output.writeInt64(1, pageNum_);
    }
    if (pageSize_ != 0L) {
      output.writeInt64(2, pageSize_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(vhost_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, vhost_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, domain_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(app_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, app_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stream_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, stream_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(streamType_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, streamType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(infoType_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 8, infoType_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (pageNum_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(1, pageNum_);
    }
    if (pageSize_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, pageSize_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(vhost_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, vhost_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, domain_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(app_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, app_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(stream_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, stream_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(streamType_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, streamType_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(infoType_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, infoType_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest)) {
      return super.equals(obj);
    }
    com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest other = (com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest) obj;

    if (getPageNum()
        != other.getPageNum()) return false;
    if (getPageSize()
        != other.getPageSize()) return false;
    if (!getVhost()
        .equals(other.getVhost())) return false;
    if (!getDomain()
        .equals(other.getDomain())) return false;
    if (!getApp()
        .equals(other.getApp())) return false;
    if (!getStream()
        .equals(other.getStream())) return false;
    if (!getStreamType()
        .equals(other.getStreamType())) return false;
    if (!getInfoType()
        .equals(other.getInfoType())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + PAGENUM_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPageNum());
    hash = (37 * hash) + PAGESIZE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getPageSize());
    hash = (37 * hash) + VHOST_FIELD_NUMBER;
    hash = (53 * hash) + getVhost().hashCode();
    hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
    hash = (53 * hash) + getDomain().hashCode();
    hash = (37 * hash) + APP_FIELD_NUMBER;
    hash = (53 * hash) + getApp().hashCode();
    hash = (37 * hash) + STREAM_FIELD_NUMBER;
    hash = (53 * hash) + getStream().hashCode();
    hash = (37 * hash) + STREAMTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getStreamType().hashCode();
    hash = (37 * hash) + INFOTYPE_FIELD_NUMBER;
    hash = (53 * hash) + getInfoType().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code Volcengine.Live.Models.Request.DescribeLiveStreamInfoByPageRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:Volcengine.Live.Models.Request.DescribeLiveStreamInfoByPageRequest)
      com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.volcengine.service.live.model.request.LiveRequest.internal_static_Volcengine_Live_Models_Request_DescribeLiveStreamInfoByPageRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.volcengine.service.live.model.request.LiveRequest.internal_static_Volcengine_Live_Models_Request_DescribeLiveStreamInfoByPageRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.class, com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.Builder.class);
    }

    // Construct using com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      pageNum_ = 0L;

      pageSize_ = 0L;

      vhost_ = "";

      domain_ = "";

      app_ = "";

      stream_ = "";

      streamType_ = "";

      infoType_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.volcengine.service.live.model.request.LiveRequest.internal_static_Volcengine_Live_Models_Request_DescribeLiveStreamInfoByPageRequest_descriptor;
    }

    @java.lang.Override
    public com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest getDefaultInstanceForType() {
      return com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest build() {
      com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest buildPartial() {
      com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest result = new com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest(this);
      result.pageNum_ = pageNum_;
      result.pageSize_ = pageSize_;
      result.vhost_ = vhost_;
      result.domain_ = domain_;
      result.app_ = app_;
      result.stream_ = stream_;
      result.streamType_ = streamType_;
      result.infoType_ = infoType_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest) {
        return mergeFrom((com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest other) {
      if (other == com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest.getDefaultInstance()) return this;
      if (other.getPageNum() != 0L) {
        setPageNum(other.getPageNum());
      }
      if (other.getPageSize() != 0L) {
        setPageSize(other.getPageSize());
      }
      if (!other.getVhost().isEmpty()) {
        vhost_ = other.vhost_;
        onChanged();
      }
      if (!other.getDomain().isEmpty()) {
        domain_ = other.domain_;
        onChanged();
      }
      if (!other.getApp().isEmpty()) {
        app_ = other.app_;
        onChanged();
      }
      if (!other.getStream().isEmpty()) {
        stream_ = other.stream_;
        onChanged();
      }
      if (!other.getStreamType().isEmpty()) {
        streamType_ = other.streamType_;
        onChanged();
      }
      if (!other.getInfoType().isEmpty()) {
        infoType_ = other.infoType_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private long pageNum_ ;
    /**
     * <pre>
     *当前页码，取值范围为 。
     * </pre>
     *
     * <code>int64 PageNum = 1;</code>
     * @return The pageNum.
     */
    @java.lang.Override
    public long getPageNum() {
      return pageNum_;
    }
    /**
     * <pre>
     *当前页码，取值范围为 。
     * </pre>
     *
     * <code>int64 PageNum = 1;</code>
     * @param value The pageNum to set.
     * @return This builder for chaining.
     */
    public Builder setPageNum(long value) {
      
      pageNum_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *当前页码，取值范围为 。
     * </pre>
     *
     * <code>int64 PageNum = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearPageNum() {
      
      pageNum_ = 0L;
      onChanged();
      return this;
    }

    private long pageSize_ ;
    /**
     * <pre>
     *分页大小，取值范围为 。
     * </pre>
     *
     * <code>int64 PageSize = 2;</code>
     * @return The pageSize.
     */
    @java.lang.Override
    public long getPageSize() {
      return pageSize_;
    }
    /**
     * <pre>
     *分页大小，取值范围为 。
     * </pre>
     *
     * <code>int64 PageSize = 2;</code>
     * @param value The pageSize to set.
     * @return This builder for chaining.
     */
    public Builder setPageSize(long value) {
      
      pageSize_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *分页大小，取值范围为 。
     * </pre>
     *
     * <code>int64 PageSize = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearPageSize() {
      
      pageSize_ = 0L;
      onChanged();
      return this;
    }

    private java.lang.Object vhost_ = "";
    /**
     * <pre>
     *域名空间名称。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Vhost = 3;</code>
     * @return The vhost.
     */
    public java.lang.String getVhost() {
      java.lang.Object ref = vhost_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        vhost_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     *域名空间名称。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Vhost = 3;</code>
     * @return The bytes for vhost.
     */
    public com.google.protobuf.ByteString
        getVhostBytes() {
      java.lang.Object ref = vhost_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vhost_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *域名空间名称。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Vhost = 3;</code>
     * @param value The vhost to set.
     * @return This builder for chaining.
     */
    public Builder setVhost(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      vhost_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *域名空间名称。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Vhost = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearVhost() {
      
      vhost_ = getDefaultInstance().getVhost();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *域名空间名称。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Vhost = 3;</code>
     * @param value The bytes for vhost to set.
     * @return This builder for chaining.
     */
    public Builder setVhostBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      vhost_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object domain_ = "";
    /**
     * <pre>
     *推流域名。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Domain = 4;</code>
     * @return The domain.
     */
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        domain_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     *推流域名。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Domain = 4;</code>
     * @return The bytes for domain.
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *推流域名。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Domain = 4;</code>
     * @param value The domain to set.
     * @return This builder for chaining.
     */
    public Builder setDomain(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      domain_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *推流域名。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Domain = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearDomain() {
      
      domain_ = getDefaultInstance().getDomain();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *推流域名。
     *参数 `Domain` 和 `Vhost`传且仅传一个。
     * </pre>
     *
     * <code>string Domain = 4;</code>
     * @param value The bytes for domain to set.
     * @return This builder for chaining.
     */
    public Builder setDomainBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      domain_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object app_ = "";
    /**
     * <pre>
     * 应用名称，默认查询所有应用名称，由 1 到 30
     * 位数字、字母、下划线及"-"和"."组成。
     * </pre>
     *
     * <code>string App = 5;</code>
     * @return The app.
     */
    public java.lang.String getApp() {
      java.lang.Object ref = app_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        app_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * 应用名称，默认查询所有应用名称，由 1 到 30
     * 位数字、字母、下划线及"-"和"."组成。
     * </pre>
     *
     * <code>string App = 5;</code>
     * @return The bytes for app.
     */
    public com.google.protobuf.ByteString
        getAppBytes() {
      java.lang.Object ref = app_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        app_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 应用名称，默认查询所有应用名称，由 1 到 30
     * 位数字、字母、下划线及"-"和"."组成。
     * </pre>
     *
     * <code>string App = 5;</code>
     * @param value The app to set.
     * @return This builder for chaining.
     */
    public Builder setApp(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      app_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 应用名称，默认查询所有应用名称，由 1 到 30
     * 位数字、字母、下划线及"-"和"."组成。
     * </pre>
     *
     * <code>string App = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearApp() {
      
      app_ = getDefaultInstance().getApp();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 应用名称，默认查询所有应用名称，由 1 到 30
     * 位数字、字母、下划线及"-"和"."组成。
     * </pre>
     *
     * <code>string App = 5;</code>
     * @param value The bytes for app to set.
     * @return This builder for chaining.
     */
    public Builder setAppBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      app_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object stream_ = "";
    /**
     * <pre>
     * 流名称，缺省情况下，查询所有流名称，由 1 到 100
     * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
     * </pre>
     *
     * <code>string Stream = 6;</code>
     * @return The stream.
     */
    public java.lang.String getStream() {
      java.lang.Object ref = stream_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        stream_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * 流名称，缺省情况下，查询所有流名称，由 1 到 100
     * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
     * </pre>
     *
     * <code>string Stream = 6;</code>
     * @return The bytes for stream.
     */
    public com.google.protobuf.ByteString
        getStreamBytes() {
      java.lang.Object ref = stream_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        stream_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 流名称，缺省情况下，查询所有流名称，由 1 到 100
     * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
     * </pre>
     *
     * <code>string Stream = 6;</code>
     * @param value The stream to set.
     * @return This builder for chaining.
     */
    public Builder setStream(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      stream_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 流名称，缺省情况下，查询所有流名称，由 1 到 100
     * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
     * </pre>
     *
     * <code>string Stream = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearStream() {
      
      stream_ = getDefaultInstance().getStream();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 流名称，缺省情况下，查询所有流名称，由 1 到 100
     * 位数字、字母、下划线及"-"和"."组成，如果指定 Stream，必须同时指定 App 的值
     * </pre>
     *
     * <code>string Stream = 6;</code>
     * @param value The bytes for stream to set.
     * @return This builder for chaining.
     */
    public Builder setStreamBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      stream_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object streamType_ = "";
    /**
     * <pre>
     * 流类型，缺省情况下表示全选。支持如下取值。
     *&lt;li&gt;Origin：原始流；
     *&lt;li&gt;trans：转码流。
     * </pre>
     *
     * <code>string StreamType = 7;</code>
     * @return The streamType.
     */
    public java.lang.String getStreamType() {
      java.lang.Object ref = streamType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        streamType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * 流类型，缺省情况下表示全选。支持如下取值。
     *&lt;li&gt;Origin：原始流；
     *&lt;li&gt;trans：转码流。
     * </pre>
     *
     * <code>string StreamType = 7;</code>
     * @return The bytes for streamType.
     */
    public com.google.protobuf.ByteString
        getStreamTypeBytes() {
      java.lang.Object ref = streamType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        streamType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 流类型，缺省情况下表示全选。支持如下取值。
     *&lt;li&gt;Origin：原始流；
     *&lt;li&gt;trans：转码流。
     * </pre>
     *
     * <code>string StreamType = 7;</code>
     * @param value The streamType to set.
     * @return This builder for chaining.
     */
    public Builder setStreamType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      streamType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 流类型，缺省情况下表示全选。支持如下取值。
     *&lt;li&gt;Origin：原始流；
     *&lt;li&gt;trans：转码流。
     * </pre>
     *
     * <code>string StreamType = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearStreamType() {
      
      streamType_ = getDefaultInstance().getStreamType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 流类型，缺省情况下表示全选。支持如下取值。
     *&lt;li&gt;Origin：原始流；
     *&lt;li&gt;trans：转码流。
     * </pre>
     *
     * <code>string StreamType = 7;</code>
     * @param value The bytes for streamType to set.
     * @return This builder for chaining.
     */
    public Builder setStreamTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      streamType_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object infoType_ = "";
    /**
     * <pre>
     * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
     *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
     *&lt;li&gt;onlineuser：在线人数；
     *&lt;li&gt;bandwidth：带宽信息;
     *&lt;li&gt;bitrate：码率信息；
     *&lt;li&gt;framerate：帧率信息；
     * </pre>
     *
     * <code>string InfoType = 8;</code>
     * @return The infoType.
     */
    public java.lang.String getInfoType() {
      java.lang.Object ref = infoType_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        infoType_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
     *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
     *&lt;li&gt;onlineuser：在线人数；
     *&lt;li&gt;bandwidth：带宽信息;
     *&lt;li&gt;bitrate：码率信息；
     *&lt;li&gt;framerate：帧率信息；
     * </pre>
     *
     * <code>string InfoType = 8;</code>
     * @return The bytes for infoType.
     */
    public com.google.protobuf.ByteString
        getInfoTypeBytes() {
      java.lang.Object ref = infoType_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        infoType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
     *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
     *&lt;li&gt;onlineuser：在线人数；
     *&lt;li&gt;bandwidth：带宽信息;
     *&lt;li&gt;bitrate：码率信息；
     *&lt;li&gt;framerate：帧率信息；
     * </pre>
     *
     * <code>string InfoType = 8;</code>
     * @param value The infoType to set.
     * @return This builder for chaining.
     */
    public Builder setInfoType(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      infoType_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
     *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
     *&lt;li&gt;onlineuser：在线人数；
     *&lt;li&gt;bandwidth：带宽信息;
     *&lt;li&gt;bitrate：码率信息；
     *&lt;li&gt;framerate：帧率信息；
     * </pre>
     *
     * <code>string InfoType = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearInfoType() {
      
      infoType_ = getDefaultInstance().getInfoType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 想要查询的目标信息，使用英文逗号作为分隔符“,”，例如，bitrate,framerate。缺省情况下表示
     *bitrate,framerate。支持如下取值。 &lt;li&gt;all：所有信息；
     *&lt;li&gt;onlineuser：在线人数；
     *&lt;li&gt;bandwidth：带宽信息;
     *&lt;li&gt;bitrate：码率信息；
     *&lt;li&gt;framerate：帧率信息；
     * </pre>
     *
     * <code>string InfoType = 8;</code>
     * @param value The bytes for infoType to set.
     * @return This builder for chaining.
     */
    public Builder setInfoTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      infoType_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:Volcengine.Live.Models.Request.DescribeLiveStreamInfoByPageRequest)
  }

  // @@protoc_insertion_point(class_scope:Volcengine.Live.Models.Request.DescribeLiveStreamInfoByPageRequest)
  private static final com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest();
  }

  public static com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DescribeLiveStreamInfoByPageRequest>
      PARSER = new com.google.protobuf.AbstractParser<DescribeLiveStreamInfoByPageRequest>() {
    @java.lang.Override
    public DescribeLiveStreamInfoByPageRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DescribeLiveStreamInfoByPageRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DescribeLiveStreamInfoByPageRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DescribeLiveStreamInfoByPageRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.volcengine.service.live.model.request.DescribeLiveStreamInfoByPageRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

