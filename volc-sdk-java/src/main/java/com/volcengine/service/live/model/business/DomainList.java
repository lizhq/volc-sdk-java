// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: live/business/domain.proto

package com.volcengine.service.live.model.business;

/**
 * Protobuf type {@code Volcengine.Live.Models.Business.DomainList}
 */
public final class DomainList extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:Volcengine.Live.Models.Business.DomainList)
    DomainListOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DomainList.newBuilder() to construct.
  private DomainList(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DomainList() {
    vhost_ = "";
    domain_ = "";
    type_ = "";
    region_ = "";
    cName_ = "";
    createTime_ = "";
    certDomain_ = "";
    chainID_ = "";
    certName_ = "";
    pushDomain_ = "";
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new DomainList();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private DomainList(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            String s = input.readStringRequireUtf8();

            vhost_ = s;
            break;
          }
          case 18: {
            String s = input.readStringRequireUtf8();

            domain_ = s;
            break;
          }
          case 24: {

            status_ = input.readInt64();
            break;
          }
          case 34: {
            String s = input.readStringRequireUtf8();

            type_ = s;
            break;
          }
          case 42: {
            String s = input.readStringRequireUtf8();

            region_ = s;
            break;
          }
          case 50: {
            String s = input.readStringRequireUtf8();

            cName_ = s;
            break;
          }
          case 56: {

            cnameCheck_ = input.readInt64();
            break;
          }
          case 64: {

            domainCheck_ = input.readInt64();
            break;
          }
          case 72: {

            iCPCheck_ = input.readInt64();
            break;
          }
          case 82: {
            String s = input.readStringRequireUtf8();

            createTime_ = s;
            break;
          }
          case 90: {
            String s = input.readStringRequireUtf8();

            certDomain_ = s;
            break;
          }
          case 98: {
            String s = input.readStringRequireUtf8();

            chainID_ = s;
            break;
          }
          case 106: {
            String s = input.readStringRequireUtf8();

            certName_ = s;
            break;
          }
          case 114: {
            String s = input.readStringRequireUtf8();

            pushDomain_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Domain.internal_static_Volcengine_Live_Models_Business_DomainList_descriptor;
  }

  @Override
  protected FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Domain.internal_static_Volcengine_Live_Models_Business_DomainList_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            DomainList.class, Builder.class);
  }

  public static final int VHOST_FIELD_NUMBER = 1;
  private volatile Object vhost_;
  /**
   * <pre>
   *对应的 Vhost。
   * </pre>
   *
   * <code>string Vhost = 1;</code>
   * @return The vhost.
   */
  @Override
  public String getVhost() {
    Object ref = vhost_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      vhost_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *对应的 Vhost。
   * </pre>
   *
   * <code>string Vhost = 1;</code>
   * @return The bytes for vhost.
   */
  @Override
  public com.google.protobuf.ByteString
      getVhostBytes() {
    Object ref = vhost_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      vhost_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DOMAIN_FIELD_NUMBER = 2;
  private volatile Object domain_;
  /**
   * <pre>
   * Domain 的名称。
   * </pre>
   *
   * <code>string Domain = 2;</code>
   * @return The domain.
   */
  @Override
  public String getDomain() {
    Object ref = domain_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      domain_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Domain 的名称。
   * </pre>
   *
   * <code>string Domain = 2;</code>
   * @return The bytes for domain.
   */
  @Override
  public com.google.protobuf.ByteString
      getDomainBytes() {
    Object ref = domain_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      domain_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int STATUS_FIELD_NUMBER = 3;
  private long status_;
  /**
   * <pre>
   * 表示 Domain状态。状态说明如下所示。
   * &lt;li&gt; 0：正常；
   * &lt;li&gt; 1：审核中；
   * &lt;li&gt; 2：禁用，禁止使用，此时domain不生效；
   * &lt;li&gt; 3：删除；
   * &lt;li&gt; 4：审核被驳回。审核不通过，需要重新创建并审核。
   * &lt;li&gt; 5：欠费关停。
   * </pre>
   *
   * <code>int64 Status = 3;</code>
   * @return The status.
   */
  @Override
  public long getStatus() {
    return status_;
  }

  public static final int TYPE_FIELD_NUMBER = 4;
  private volatile Object type_;
  /**
   * <pre>
   * 域名类型，包含两种类型。
   * &lt;li&gt; push：推流域名；
   * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
   * </pre>
   *
   * <code>string Type = 4;</code>
   * @return The type.
   */
  @Override
  public String getType() {
    Object ref = type_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      type_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 域名类型，包含两种类型。
   * &lt;li&gt; push：推流域名；
   * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
   * </pre>
   *
   * <code>string Type = 4;</code>
   * @return The bytes for type.
   */
  @Override
  public com.google.protobuf.ByteString
      getTypeBytes() {
    Object ref = type_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      type_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int REGION_FIELD_NUMBER = 5;
  private volatile Object region_;
  /**
   * <pre>
   * 区域，包含两种类型。
   * &lt;li&gt; cn：中国大陆；
   * &lt;li&gt; oversea：海外。
   * </pre>
   *
   * <code>string Region = 5;</code>
   * @return The region.
   */
  @Override
  public String getRegion() {
    Object ref = region_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      region_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * 区域，包含两种类型。
   * &lt;li&gt; cn：中国大陆；
   * &lt;li&gt; oversea：海外。
   * </pre>
   *
   * <code>string Region = 5;</code>
   * @return The bytes for region.
   */
  @Override
  public com.google.protobuf.ByteString
      getRegionBytes() {
    Object ref = region_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      region_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CNAME_FIELD_NUMBER = 6;
  private volatile Object cName_;
  /**
   * <pre>
   * Cname 信息。
   * </pre>
   *
   * <code>string CName = 6;</code>
   * @return The cName.
   */
  @Override
  public String getCName() {
    Object ref = cName_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      cName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Cname 信息。
   * </pre>
   *
   * <code>string CName = 6;</code>
   * @return The bytes for cName.
   */
  @Override
  public com.google.protobuf.ByteString
      getCNameBytes() {
    Object ref = cName_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      cName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CNAMECHECK_FIELD_NUMBER = 7;
  private long cnameCheck_;
  /**
   * <pre>
   * Cname 状态。
   * &lt;li&gt; 0：未配置 CNAME；
   * &lt;li&gt; 1：已配置 CNAME。
   * </pre>
   *
   * <code>int64 CnameCheck = 7;</code>
   * @return The cnameCheck.
   */
  @Override
  public long getCnameCheck() {
    return cnameCheck_;
  }

  public static final int DOMAINCHECK_FIELD_NUMBER = 8;
  private long domainCheck_;
  /**
   * <pre>
   * 域名是否可用的状态。
   * &lt;li&gt; 0：正常，域名为可用状态；
   * &lt;li&gt; 1：配置中，域名为可用状态；
   * &lt;li&gt; 2：不可用，域名为其他的不可用状态。
   * </pre>
   *
   * <code>int64 DomainCheck = 8;</code>
   * @return The domainCheck.
   */
  @Override
  public long getDomainCheck() {
    return domainCheck_;
  }

  public static final int ICPCHECK_FIELD_NUMBER = 9;
  private long iCPCheck_;
  /**
   * <pre>
   * IPC 备案校验是否通过，是否过期信息。
   * </pre>
   *
   * <code>int64 ICPCheck = 9;</code>
   * @return The iCPCheck.
   */
  @Override
  public long getICPCheck() {
    return iCPCheck_;
  }

  public static final int CREATETIME_FIELD_NUMBER = 10;
  private volatile Object createTime_;
  /**
   * <pre>
   *创建时间。
   * </pre>
   *
   * <code>string CreateTime = 10;</code>
   * @return The createTime.
   */
  @Override
  public String getCreateTime() {
    Object ref = createTime_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      createTime_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *创建时间。
   * </pre>
   *
   * <code>string CreateTime = 10;</code>
   * @return The bytes for createTime.
   */
  @Override
  public com.google.protobuf.ByteString
      getCreateTimeBytes() {
    Object ref = createTime_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      createTime_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CERTDOMAIN_FIELD_NUMBER = 11;
  private volatile Object certDomain_;
  /**
   * <pre>
   *所绑定证书支持的泛域名。
   * </pre>
   *
   * <code>string CertDomain = 11;</code>
   * @return The certDomain.
   */
  @Override
  public String getCertDomain() {
    Object ref = certDomain_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      certDomain_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *所绑定证书支持的泛域名。
   * </pre>
   *
   * <code>string CertDomain = 11;</code>
   * @return The bytes for certDomain.
   */
  @Override
  public com.google.protobuf.ByteString
      getCertDomainBytes() {
    Object ref = certDomain_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      certDomain_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CHAINID_FIELD_NUMBER = 12;
  private volatile Object chainID_;
  /**
   * <pre>
   *绑定的证书信息。
   * </pre>
   *
   * <code>string ChainID = 12;</code>
   * @return The chainID.
   */
  @Override
  public String getChainID() {
    Object ref = chainID_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      chainID_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *绑定的证书信息。
   * </pre>
   *
   * <code>string ChainID = 12;</code>
   * @return The bytes for chainID.
   */
  @Override
  public com.google.protobuf.ByteString
      getChainIDBytes() {
    Object ref = chainID_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      chainID_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int CERTNAME_FIELD_NUMBER = 13;
  private volatile Object certName_;
  /**
   * <pre>
   *绑定的证书名称。
   * </pre>
   *
   * <code>string CertName = 13;</code>
   * @return The certName.
   */
  @Override
  public String getCertName() {
    Object ref = certName_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      certName_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *绑定的证书名称。
   * </pre>
   *
   * <code>string CertName = 13;</code>
   * @return The bytes for certName.
   */
  @Override
  public com.google.protobuf.ByteString
      getCertNameBytes() {
    Object ref = certName_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      certName_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PUSHDOMAIN_FIELD_NUMBER = 14;
  private volatile Object pushDomain_;
  /**
   * <pre>
   *绑定的推流域名。
   * </pre>
   *
   * <code>string PushDomain = 14;</code>
   * @return The pushDomain.
   */
  @Override
  public String getPushDomain() {
    Object ref = pushDomain_;
    if (ref instanceof String) {
      return (String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      String s = bs.toStringUtf8();
      pushDomain_ = s;
      return s;
    }
  }
  /**
   * <pre>
   *绑定的推流域名。
   * </pre>
   *
   * <code>string PushDomain = 14;</code>
   * @return The bytes for pushDomain.
   */
  @Override
  public com.google.protobuf.ByteString
      getPushDomainBytes() {
    Object ref = pushDomain_;
    if (ref instanceof String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (String) ref);
      pushDomain_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(vhost_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, vhost_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, domain_);
    }
    if (status_ != 0L) {
      output.writeInt64(3, status_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 4, type_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(region_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 5, region_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(cName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, cName_);
    }
    if (cnameCheck_ != 0L) {
      output.writeInt64(7, cnameCheck_);
    }
    if (domainCheck_ != 0L) {
      output.writeInt64(8, domainCheck_);
    }
    if (iCPCheck_ != 0L) {
      output.writeInt64(9, iCPCheck_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(createTime_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 10, createTime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(certDomain_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 11, certDomain_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(chainID_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 12, chainID_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(certName_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 13, certName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pushDomain_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 14, pushDomain_);
    }
    unknownFields.writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(vhost_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, vhost_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, domain_);
    }
    if (status_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(3, status_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(type_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, type_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(region_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, region_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(cName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, cName_);
    }
    if (cnameCheck_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(7, cnameCheck_);
    }
    if (domainCheck_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(8, domainCheck_);
    }
    if (iCPCheck_ != 0L) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(9, iCPCheck_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(createTime_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(10, createTime_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(certDomain_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(11, certDomain_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(chainID_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, chainID_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(certName_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, certName_);
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(pushDomain_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(14, pushDomain_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof DomainList)) {
      return super.equals(obj);
    }
    DomainList other = (DomainList) obj;

    if (!getVhost()
        .equals(other.getVhost())) return false;
    if (!getDomain()
        .equals(other.getDomain())) return false;
    if (getStatus()
        != other.getStatus()) return false;
    if (!getType()
        .equals(other.getType())) return false;
    if (!getRegion()
        .equals(other.getRegion())) return false;
    if (!getCName()
        .equals(other.getCName())) return false;
    if (getCnameCheck()
        != other.getCnameCheck()) return false;
    if (getDomainCheck()
        != other.getDomainCheck()) return false;
    if (getICPCheck()
        != other.getICPCheck()) return false;
    if (!getCreateTime()
        .equals(other.getCreateTime())) return false;
    if (!getCertDomain()
        .equals(other.getCertDomain())) return false;
    if (!getChainID()
        .equals(other.getChainID())) return false;
    if (!getCertName()
        .equals(other.getCertName())) return false;
    if (!getPushDomain()
        .equals(other.getPushDomain())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VHOST_FIELD_NUMBER;
    hash = (53 * hash) + getVhost().hashCode();
    hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
    hash = (53 * hash) + getDomain().hashCode();
    hash = (37 * hash) + STATUS_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getStatus());
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + getType().hashCode();
    hash = (37 * hash) + REGION_FIELD_NUMBER;
    hash = (53 * hash) + getRegion().hashCode();
    hash = (37 * hash) + CNAME_FIELD_NUMBER;
    hash = (53 * hash) + getCName().hashCode();
    hash = (37 * hash) + CNAMECHECK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getCnameCheck());
    hash = (37 * hash) + DOMAINCHECK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getDomainCheck());
    hash = (37 * hash) + ICPCHECK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
        getICPCheck());
    hash = (37 * hash) + CREATETIME_FIELD_NUMBER;
    hash = (53 * hash) + getCreateTime().hashCode();
    hash = (37 * hash) + CERTDOMAIN_FIELD_NUMBER;
    hash = (53 * hash) + getCertDomain().hashCode();
    hash = (37 * hash) + CHAINID_FIELD_NUMBER;
    hash = (53 * hash) + getChainID().hashCode();
    hash = (37 * hash) + CERTNAME_FIELD_NUMBER;
    hash = (53 * hash) + getCertName().hashCode();
    hash = (37 * hash) + PUSHDOMAIN_FIELD_NUMBER;
    hash = (53 * hash) + getPushDomain().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static DomainList parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static DomainList parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static DomainList parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static DomainList parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static DomainList parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static DomainList parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static DomainList parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static DomainList parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static DomainList parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static DomainList parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static DomainList parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static DomainList parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(DomainList prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code Volcengine.Live.Models.Business.DomainList}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:Volcengine.Live.Models.Business.DomainList)
      DomainListOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Domain.internal_static_Volcengine_Live_Models_Business_DomainList_descriptor;
    }

    @Override
    protected FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Domain.internal_static_Volcengine_Live_Models_Business_DomainList_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              DomainList.class, Builder.class);
    }

    // Construct using com.volcengine.service.live.model.business.DomainList.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @Override
    public Builder clear() {
      super.clear();
      vhost_ = "";

      domain_ = "";

      status_ = 0L;

      type_ = "";

      region_ = "";

      cName_ = "";

      cnameCheck_ = 0L;

      domainCheck_ = 0L;

      iCPCheck_ = 0L;

      createTime_ = "";

      certDomain_ = "";

      chainID_ = "";

      certName_ = "";

      pushDomain_ = "";

      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Domain.internal_static_Volcengine_Live_Models_Business_DomainList_descriptor;
    }

    @Override
    public DomainList getDefaultInstanceForType() {
      return DomainList.getDefaultInstance();
    }

    @Override
    public DomainList build() {
      DomainList result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public DomainList buildPartial() {
      DomainList result = new DomainList(this);
      result.vhost_ = vhost_;
      result.domain_ = domain_;
      result.status_ = status_;
      result.type_ = type_;
      result.region_ = region_;
      result.cName_ = cName_;
      result.cnameCheck_ = cnameCheck_;
      result.domainCheck_ = domainCheck_;
      result.iCPCheck_ = iCPCheck_;
      result.createTime_ = createTime_;
      result.certDomain_ = certDomain_;
      result.chainID_ = chainID_;
      result.certName_ = certName_;
      result.pushDomain_ = pushDomain_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof DomainList) {
        return mergeFrom((DomainList)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(DomainList other) {
      if (other == DomainList.getDefaultInstance()) return this;
      if (!other.getVhost().isEmpty()) {
        vhost_ = other.vhost_;
        onChanged();
      }
      if (!other.getDomain().isEmpty()) {
        domain_ = other.domain_;
        onChanged();
      }
      if (other.getStatus() != 0L) {
        setStatus(other.getStatus());
      }
      if (!other.getType().isEmpty()) {
        type_ = other.type_;
        onChanged();
      }
      if (!other.getRegion().isEmpty()) {
        region_ = other.region_;
        onChanged();
      }
      if (!other.getCName().isEmpty()) {
        cName_ = other.cName_;
        onChanged();
      }
      if (other.getCnameCheck() != 0L) {
        setCnameCheck(other.getCnameCheck());
      }
      if (other.getDomainCheck() != 0L) {
        setDomainCheck(other.getDomainCheck());
      }
      if (other.getICPCheck() != 0L) {
        setICPCheck(other.getICPCheck());
      }
      if (!other.getCreateTime().isEmpty()) {
        createTime_ = other.createTime_;
        onChanged();
      }
      if (!other.getCertDomain().isEmpty()) {
        certDomain_ = other.certDomain_;
        onChanged();
      }
      if (!other.getChainID().isEmpty()) {
        chainID_ = other.chainID_;
        onChanged();
      }
      if (!other.getCertName().isEmpty()) {
        certName_ = other.certName_;
        onChanged();
      }
      if (!other.getPushDomain().isEmpty()) {
        pushDomain_ = other.pushDomain_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      DomainList parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (DomainList) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private Object vhost_ = "";
    /**
     * <pre>
     *对应的 Vhost。
     * </pre>
     *
     * <code>string Vhost = 1;</code>
     * @return The vhost.
     */
    public String getVhost() {
      Object ref = vhost_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        vhost_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *对应的 Vhost。
     * </pre>
     *
     * <code>string Vhost = 1;</code>
     * @return The bytes for vhost.
     */
    public com.google.protobuf.ByteString
        getVhostBytes() {
      Object ref = vhost_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        vhost_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *对应的 Vhost。
     * </pre>
     *
     * <code>string Vhost = 1;</code>
     * @param value The vhost to set.
     * @return This builder for chaining.
     */
    public Builder setVhost(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      vhost_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *对应的 Vhost。
     * </pre>
     *
     * <code>string Vhost = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearVhost() {
      
      vhost_ = getDefaultInstance().getVhost();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *对应的 Vhost。
     * </pre>
     *
     * <code>string Vhost = 1;</code>
     * @param value The bytes for vhost to set.
     * @return This builder for chaining.
     */
    public Builder setVhostBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      vhost_ = value;
      onChanged();
      return this;
    }

    private Object domain_ = "";
    /**
     * <pre>
     * Domain 的名称。
     * </pre>
     *
     * <code>string Domain = 2;</code>
     * @return The domain.
     */
    public String getDomain() {
      Object ref = domain_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        domain_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Domain 的名称。
     * </pre>
     *
     * <code>string Domain = 2;</code>
     * @return The bytes for domain.
     */
    public com.google.protobuf.ByteString
        getDomainBytes() {
      Object ref = domain_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Domain 的名称。
     * </pre>
     *
     * <code>string Domain = 2;</code>
     * @param value The domain to set.
     * @return This builder for chaining.
     */
    public Builder setDomain(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      domain_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Domain 的名称。
     * </pre>
     *
     * <code>string Domain = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearDomain() {
      
      domain_ = getDefaultInstance().getDomain();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Domain 的名称。
     * </pre>
     *
     * <code>string Domain = 2;</code>
     * @param value The bytes for domain to set.
     * @return This builder for chaining.
     */
    public Builder setDomainBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      domain_ = value;
      onChanged();
      return this;
    }

    private long status_ ;
    /**
     * <pre>
     * 表示 Domain状态。状态说明如下所示。
     * &lt;li&gt; 0：正常；
     * &lt;li&gt; 1：审核中；
     * &lt;li&gt; 2：禁用，禁止使用，此时domain不生效；
     * &lt;li&gt; 3：删除；
     * &lt;li&gt; 4：审核被驳回。审核不通过，需要重新创建并审核。
     * &lt;li&gt; 5：欠费关停。
     * </pre>
     *
     * <code>int64 Status = 3;</code>
     * @return The status.
     */
    @Override
    public long getStatus() {
      return status_;
    }
    /**
     * <pre>
     * 表示 Domain状态。状态说明如下所示。
     * &lt;li&gt; 0：正常；
     * &lt;li&gt; 1：审核中；
     * &lt;li&gt; 2：禁用，禁止使用，此时domain不生效；
     * &lt;li&gt; 3：删除；
     * &lt;li&gt; 4：审核被驳回。审核不通过，需要重新创建并审核。
     * &lt;li&gt; 5：欠费关停。
     * </pre>
     *
     * <code>int64 Status = 3;</code>
     * @param value The status to set.
     * @return This builder for chaining.
     */
    public Builder setStatus(long value) {
      
      status_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 表示 Domain状态。状态说明如下所示。
     * &lt;li&gt; 0：正常；
     * &lt;li&gt; 1：审核中；
     * &lt;li&gt; 2：禁用，禁止使用，此时domain不生效；
     * &lt;li&gt; 3：删除；
     * &lt;li&gt; 4：审核被驳回。审核不通过，需要重新创建并审核。
     * &lt;li&gt; 5：欠费关停。
     * </pre>
     *
     * <code>int64 Status = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearStatus() {
      
      status_ = 0L;
      onChanged();
      return this;
    }

    private Object type_ = "";
    /**
     * <pre>
     * 域名类型，包含两种类型。
     * &lt;li&gt; push：推流域名；
     * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
     * </pre>
     *
     * <code>string Type = 4;</code>
     * @return The type.
     */
    public String getType() {
      Object ref = type_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        type_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * 域名类型，包含两种类型。
     * &lt;li&gt; push：推流域名；
     * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
     * </pre>
     *
     * <code>string Type = 4;</code>
     * @return The bytes for type.
     */
    public com.google.protobuf.ByteString
        getTypeBytes() {
      Object ref = type_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        type_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 域名类型，包含两种类型。
     * &lt;li&gt; push：推流域名；
     * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
     * </pre>
     *
     * <code>string Type = 4;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 域名类型，包含两种类型。
     * &lt;li&gt; push：推流域名；
     * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
     * </pre>
     *
     * <code>string Type = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      
      type_ = getDefaultInstance().getType();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 域名类型，包含两种类型。
     * &lt;li&gt; push：推流域名；
     * &lt;li&gt; pull-flv：拉流域名，包含RTMP、FLV、HLS 格式。
     * </pre>
     *
     * <code>string Type = 4;</code>
     * @param value The bytes for type to set.
     * @return This builder for chaining.
     */
    public Builder setTypeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      type_ = value;
      onChanged();
      return this;
    }

    private Object region_ = "";
    /**
     * <pre>
     * 区域，包含两种类型。
     * &lt;li&gt; cn：中国大陆；
     * &lt;li&gt; oversea：海外。
     * </pre>
     *
     * <code>string Region = 5;</code>
     * @return The region.
     */
    public String getRegion() {
      Object ref = region_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        region_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * 区域，包含两种类型。
     * &lt;li&gt; cn：中国大陆；
     * &lt;li&gt; oversea：海外。
     * </pre>
     *
     * <code>string Region = 5;</code>
     * @return The bytes for region.
     */
    public com.google.protobuf.ByteString
        getRegionBytes() {
      Object ref = region_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        region_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * 区域，包含两种类型。
     * &lt;li&gt; cn：中国大陆；
     * &lt;li&gt; oversea：海外。
     * </pre>
     *
     * <code>string Region = 5;</code>
     * @param value The region to set.
     * @return This builder for chaining.
     */
    public Builder setRegion(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      region_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 区域，包含两种类型。
     * &lt;li&gt; cn：中国大陆；
     * &lt;li&gt; oversea：海外。
     * </pre>
     *
     * <code>string Region = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearRegion() {
      
      region_ = getDefaultInstance().getRegion();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 区域，包含两种类型。
     * &lt;li&gt; cn：中国大陆；
     * &lt;li&gt; oversea：海外。
     * </pre>
     *
     * <code>string Region = 5;</code>
     * @param value The bytes for region to set.
     * @return This builder for chaining.
     */
    public Builder setRegionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      region_ = value;
      onChanged();
      return this;
    }

    private Object cName_ = "";
    /**
     * <pre>
     * Cname 信息。
     * </pre>
     *
     * <code>string CName = 6;</code>
     * @return The cName.
     */
    public String getCName() {
      Object ref = cName_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        cName_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     * Cname 信息。
     * </pre>
     *
     * <code>string CName = 6;</code>
     * @return The bytes for cName.
     */
    public com.google.protobuf.ByteString
        getCNameBytes() {
      Object ref = cName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        cName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Cname 信息。
     * </pre>
     *
     * <code>string CName = 6;</code>
     * @param value The cName to set.
     * @return This builder for chaining.
     */
    public Builder setCName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      cName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Cname 信息。
     * </pre>
     *
     * <code>string CName = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearCName() {
      
      cName_ = getDefaultInstance().getCName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Cname 信息。
     * </pre>
     *
     * <code>string CName = 6;</code>
     * @param value The bytes for cName to set.
     * @return This builder for chaining.
     */
    public Builder setCNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      cName_ = value;
      onChanged();
      return this;
    }

    private long cnameCheck_ ;
    /**
     * <pre>
     * Cname 状态。
     * &lt;li&gt; 0：未配置 CNAME；
     * &lt;li&gt; 1：已配置 CNAME。
     * </pre>
     *
     * <code>int64 CnameCheck = 7;</code>
     * @return The cnameCheck.
     */
    @Override
    public long getCnameCheck() {
      return cnameCheck_;
    }
    /**
     * <pre>
     * Cname 状态。
     * &lt;li&gt; 0：未配置 CNAME；
     * &lt;li&gt; 1：已配置 CNAME。
     * </pre>
     *
     * <code>int64 CnameCheck = 7;</code>
     * @param value The cnameCheck to set.
     * @return This builder for chaining.
     */
    public Builder setCnameCheck(long value) {
      
      cnameCheck_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Cname 状态。
     * &lt;li&gt; 0：未配置 CNAME；
     * &lt;li&gt; 1：已配置 CNAME。
     * </pre>
     *
     * <code>int64 CnameCheck = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearCnameCheck() {
      
      cnameCheck_ = 0L;
      onChanged();
      return this;
    }

    private long domainCheck_ ;
    /**
     * <pre>
     * 域名是否可用的状态。
     * &lt;li&gt; 0：正常，域名为可用状态；
     * &lt;li&gt; 1：配置中，域名为可用状态；
     * &lt;li&gt; 2：不可用，域名为其他的不可用状态。
     * </pre>
     *
     * <code>int64 DomainCheck = 8;</code>
     * @return The domainCheck.
     */
    @Override
    public long getDomainCheck() {
      return domainCheck_;
    }
    /**
     * <pre>
     * 域名是否可用的状态。
     * &lt;li&gt; 0：正常，域名为可用状态；
     * &lt;li&gt; 1：配置中，域名为可用状态；
     * &lt;li&gt; 2：不可用，域名为其他的不可用状态。
     * </pre>
     *
     * <code>int64 DomainCheck = 8;</code>
     * @param value The domainCheck to set.
     * @return This builder for chaining.
     */
    public Builder setDomainCheck(long value) {
      
      domainCheck_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 域名是否可用的状态。
     * &lt;li&gt; 0：正常，域名为可用状态；
     * &lt;li&gt; 1：配置中，域名为可用状态；
     * &lt;li&gt; 2：不可用，域名为其他的不可用状态。
     * </pre>
     *
     * <code>int64 DomainCheck = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearDomainCheck() {
      
      domainCheck_ = 0L;
      onChanged();
      return this;
    }

    private long iCPCheck_ ;
    /**
     * <pre>
     * IPC 备案校验是否通过，是否过期信息。
     * </pre>
     *
     * <code>int64 ICPCheck = 9;</code>
     * @return The iCPCheck.
     */
    @Override
    public long getICPCheck() {
      return iCPCheck_;
    }
    /**
     * <pre>
     * IPC 备案校验是否通过，是否过期信息。
     * </pre>
     *
     * <code>int64 ICPCheck = 9;</code>
     * @param value The iCPCheck to set.
     * @return This builder for chaining.
     */
    public Builder setICPCheck(long value) {
      
      iCPCheck_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * IPC 备案校验是否通过，是否过期信息。
     * </pre>
     *
     * <code>int64 ICPCheck = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearICPCheck() {
      
      iCPCheck_ = 0L;
      onChanged();
      return this;
    }

    private Object createTime_ = "";
    /**
     * <pre>
     *创建时间。
     * </pre>
     *
     * <code>string CreateTime = 10;</code>
     * @return The createTime.
     */
    public String getCreateTime() {
      Object ref = createTime_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        createTime_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *创建时间。
     * </pre>
     *
     * <code>string CreateTime = 10;</code>
     * @return The bytes for createTime.
     */
    public com.google.protobuf.ByteString
        getCreateTimeBytes() {
      Object ref = createTime_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        createTime_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *创建时间。
     * </pre>
     *
     * <code>string CreateTime = 10;</code>
     * @param value The createTime to set.
     * @return This builder for chaining.
     */
    public Builder setCreateTime(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      createTime_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *创建时间。
     * </pre>
     *
     * <code>string CreateTime = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearCreateTime() {
      
      createTime_ = getDefaultInstance().getCreateTime();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *创建时间。
     * </pre>
     *
     * <code>string CreateTime = 10;</code>
     * @param value The bytes for createTime to set.
     * @return This builder for chaining.
     */
    public Builder setCreateTimeBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      createTime_ = value;
      onChanged();
      return this;
    }

    private Object certDomain_ = "";
    /**
     * <pre>
     *所绑定证书支持的泛域名。
     * </pre>
     *
     * <code>string CertDomain = 11;</code>
     * @return The certDomain.
     */
    public String getCertDomain() {
      Object ref = certDomain_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        certDomain_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *所绑定证书支持的泛域名。
     * </pre>
     *
     * <code>string CertDomain = 11;</code>
     * @return The bytes for certDomain.
     */
    public com.google.protobuf.ByteString
        getCertDomainBytes() {
      Object ref = certDomain_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        certDomain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *所绑定证书支持的泛域名。
     * </pre>
     *
     * <code>string CertDomain = 11;</code>
     * @param value The certDomain to set.
     * @return This builder for chaining.
     */
    public Builder setCertDomain(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      certDomain_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *所绑定证书支持的泛域名。
     * </pre>
     *
     * <code>string CertDomain = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearCertDomain() {
      
      certDomain_ = getDefaultInstance().getCertDomain();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *所绑定证书支持的泛域名。
     * </pre>
     *
     * <code>string CertDomain = 11;</code>
     * @param value The bytes for certDomain to set.
     * @return This builder for chaining.
     */
    public Builder setCertDomainBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      certDomain_ = value;
      onChanged();
      return this;
    }

    private Object chainID_ = "";
    /**
     * <pre>
     *绑定的证书信息。
     * </pre>
     *
     * <code>string ChainID = 12;</code>
     * @return The chainID.
     */
    public String getChainID() {
      Object ref = chainID_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        chainID_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *绑定的证书信息。
     * </pre>
     *
     * <code>string ChainID = 12;</code>
     * @return The bytes for chainID.
     */
    public com.google.protobuf.ByteString
        getChainIDBytes() {
      Object ref = chainID_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        chainID_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *绑定的证书信息。
     * </pre>
     *
     * <code>string ChainID = 12;</code>
     * @param value The chainID to set.
     * @return This builder for chaining.
     */
    public Builder setChainID(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      chainID_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *绑定的证书信息。
     * </pre>
     *
     * <code>string ChainID = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearChainID() {
      
      chainID_ = getDefaultInstance().getChainID();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *绑定的证书信息。
     * </pre>
     *
     * <code>string ChainID = 12;</code>
     * @param value The bytes for chainID to set.
     * @return This builder for chaining.
     */
    public Builder setChainIDBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      chainID_ = value;
      onChanged();
      return this;
    }

    private Object certName_ = "";
    /**
     * <pre>
     *绑定的证书名称。
     * </pre>
     *
     * <code>string CertName = 13;</code>
     * @return The certName.
     */
    public String getCertName() {
      Object ref = certName_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        certName_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *绑定的证书名称。
     * </pre>
     *
     * <code>string CertName = 13;</code>
     * @return The bytes for certName.
     */
    public com.google.protobuf.ByteString
        getCertNameBytes() {
      Object ref = certName_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        certName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *绑定的证书名称。
     * </pre>
     *
     * <code>string CertName = 13;</code>
     * @param value The certName to set.
     * @return This builder for chaining.
     */
    public Builder setCertName(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      certName_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *绑定的证书名称。
     * </pre>
     *
     * <code>string CertName = 13;</code>
     * @return This builder for chaining.
     */
    public Builder clearCertName() {
      
      certName_ = getDefaultInstance().getCertName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *绑定的证书名称。
     * </pre>
     *
     * <code>string CertName = 13;</code>
     * @param value The bytes for certName to set.
     * @return This builder for chaining.
     */
    public Builder setCertNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      certName_ = value;
      onChanged();
      return this;
    }

    private Object pushDomain_ = "";
    /**
     * <pre>
     *绑定的推流域名。
     * </pre>
     *
     * <code>string PushDomain = 14;</code>
     * @return The pushDomain.
     */
    public String getPushDomain() {
      Object ref = pushDomain_;
      if (!(ref instanceof String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        String s = bs.toStringUtf8();
        pushDomain_ = s;
        return s;
      } else {
        return (String) ref;
      }
    }
    /**
     * <pre>
     *绑定的推流域名。
     * </pre>
     *
     * <code>string PushDomain = 14;</code>
     * @return The bytes for pushDomain.
     */
    public com.google.protobuf.ByteString
        getPushDomainBytes() {
      Object ref = pushDomain_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (String) ref);
        pushDomain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     *绑定的推流域名。
     * </pre>
     *
     * <code>string PushDomain = 14;</code>
     * @param value The pushDomain to set.
     * @return This builder for chaining.
     */
    public Builder setPushDomain(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      pushDomain_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     *绑定的推流域名。
     * </pre>
     *
     * <code>string PushDomain = 14;</code>
     * @return This builder for chaining.
     */
    public Builder clearPushDomain() {
      
      pushDomain_ = getDefaultInstance().getPushDomain();
      onChanged();
      return this;
    }
    /**
     * <pre>
     *绑定的推流域名。
     * </pre>
     *
     * <code>string PushDomain = 14;</code>
     * @param value The bytes for pushDomain to set.
     * @return This builder for chaining.
     */
    public Builder setPushDomainBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      pushDomain_ = value;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:Volcengine.Live.Models.Business.DomainList)
  }

  // @@protoc_insertion_point(class_scope:Volcengine.Live.Models.Business.DomainList)
  private static final DomainList DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new DomainList();
  }

  public static DomainList getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<DomainList>
      PARSER = new com.google.protobuf.AbstractParser<DomainList>() {
    @Override
    public DomainList parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new DomainList(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<DomainList> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<DomainList> getParserForType() {
    return PARSER;
  }

  @Override
  public DomainList getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

